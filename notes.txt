  colors: {
      'black': '#000000',
      'dark-green': '#009688',
      'gray': '#908D8D',
      'light-gray': '#DADADA',
      'orange': '#ff585B',
      'white': '#ffffff',
      'blue': 'rgb(59 130 246)',
    },
    fontSize: {
      sm: '1.25rem',
      base: '1.5rem',
      xl: '2rem',
      '2xl': '2.25rem',
      '3xl': '2.5rem',
      '4xl': '3rem',
      '5xl': '3.8'
    },
     borderRadius: {
        default: '5px'
       }
    
---------------------------------------------------
getAll():Observable<Todo[]> {
      return of([
        {
          id: 1,
          description: 'description 1',
          completed: false
        },
        {
          id: 2,
          description: 'description 2',
          completed: false
        }
      ]).pipe(delay(2000))
    }

    constructor(private store: Store<AppStateInterface>) {
      this.isLoading$ = this.store.pipe(select(isLoadingSelector));
      this.error$ = this.store.pipe(select(errorSelector));
      this.posts$ = this.store.pipe(select(postsSelector));
    }
  
    ngOnInit(): void {
      this.store.dispatch(PostsActions.getPosts());
    }
-----------------------------------
provideStore(appStore),
    provideEffects(appEffects),
    CourseService

    ----------------------------------------
     <h1 class="top-[135px]">Good evening Samuel</h1>
    <ng-container
        *ngIf="courses$ | async as courses;"
    >
    <ul *ngIf="courses.length;">
        <li *ngFor="let course of courses$ | async; let i=index;">
            {{course.name}}
            {{course.author}}
            {{course.progress}}
            {{course.lessons}}
        </li>

    </ul>

    </ng-container>
    <button (click)="loadCourses()">Refresh</button>
    <button (click)="addCourse(courses.length + 1)">Add</button>
   